import { app, BrowserWindow, ipcMain } from 'electron';
import { setupProjectHandlers } from './ipcHandlers/projectHandlers';
import { setupGitHandlers } from './ipcHandlers/gitHandlers';
import { setupFileHandlers } from './ipcHandlers/fileHandlers';
import { setupRecentFilesHandlers } from './ipcHandlers/recentFilesHandlers';
import { setupTerminalHandlers } from './ipcHandlers/terminalHandlers';
import { setupLanguageServerHandlers } from './ipcHandlers/languageServerHandlers';
import { setupGroqHandlers } from './ipcHandlers/groqHandlers';
import { setupSystemHandlers } from './ipcHandlers/systemHandlers';
import { setupSettingsHandlers } from './ipcHandlers/setupSettingsHandlers';
import { setupUIAutomationHandlers } from './ipcHandlers/uiAutomationHandlers';
import { setupApplicationMenu } from './menu';
import path from 'path';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Keep a global reference of the mainWindow object
let mainWindow: BrowserWindow | null = null;

// Setup all IPC handlers
const setupIpcHandlers = () => {
  setupProjectHandlers();
  setupGitHandlers();
  setupFileHandlers();
  setupRecentFilesHandlers();
  setupTerminalHandlers();
  setupLanguageServerHandlers();
  setupGroqHandlers();
  setupSystemHandlers();
  setupSettingsHandlers();
  setupUIAutomationHandlers();
};

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 900,
    width: 1600,
    icon: path.join(__dirname, '../assets/icons/icon.png'),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // Set up the application menu
  const { updateRecentProjects } = setupApplicationMenu(mainWindow);

  // Update menu when recent files change
  ipcMain.on('recent-files-updated', () => {
    updateRecentProjects().catch(console.error);
  });

  // Set CSP based on environment
  const isDev = process.env.NODE_ENV === 'development';

  // Set CSP headers before loading the URL
  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          isDev
              ? "script-src 'self' 'unsafe-inline' 'unsafe-eval'"
              : "script-src 'self' 'unsafe-inline'"
        ]
      }
    });
  });

  // Debug logging
  mainWindow.webContents.on('did-finish-load', () => {
    console.log('Window loaded successfully');
  });

  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
    console.error('Failed to load window:', errorCode, errorDescription);
  });

  // Load the index.html of the app
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then(() => {
    console.log('Window loaded successfully');
  }).catch(err => {
    console.error('Failed to load window:', err);
  });

  // Open the DevTools in development mode
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }

  // Handle window close
  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  // Setup IPC handlers before creating the window
  setupIpcHandlers();

  // Create window
  createWindow();

  // Log that the app is ready
  console.log('Application is ready');
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Debugging for uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
});